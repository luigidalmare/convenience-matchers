/*
 * Released under the terms of the MIT License.
 *
 * Copyright (c) 2020 objecttrouve.org <un.object.trouve@gmail.com>
 *
 */

import net.researchgate.release.GitAdapter

import java.util.regex.Matcher



buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java-library'
    id 'maven'
    id 'signing'
    id "me.champeau.gradle.jmh" version "0.5.3"
    id "net.researchgate.release" version "2.8.1"
}


repositories {
    mavenCentral()
}

//noinspection GroovyUnusedAssignment
group='org.objecttrouve'
//noinspection GroovyUnusedAssignment
sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8
//noinspection GroovyUnusedAssignment
archivesBaseName = "convenience-matchers"


dependencies {
    api group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    def junitVersion = '4.13.2'
    testImplementation group: 'junit', name: 'junit', version: junitVersion

    def jmhVersion = '1.34'
    jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
    jmh group: 'junit', name: 'junit', version: junitVersion
}



/* Workaround for weird duplication and "No benchmarks to run" issues. */
task removeJmhDuplicates(type: Delete) {
    delete fileTree(
            dir: "${buildDir}/classes/java/jmh/org/objecttrouve/testing/matchers/fluentatts/generated",
            exclude: "*.java"
    )
}
task fixJmhMetaInf(type: Copy){
    from "${buildDir}/classes/java/jmh/META-INF"
    into "${buildDir}/jmh-generated-classes/META-INF"
}
jmhJar.dependsOn(fixJmhMetaInf)
removeJmhDuplicates.mustRunAfter(jmhCompileGeneratedClasses)
fixJmhMetaInf.dependsOn(removeJmhDuplicates)

jmh {
    //noinspection GroovyAccessibility
    duplicateClassesStrategy = 'warn'
    failOnError = true
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

test {
    systemProperties System.getProperties()
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { final MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Convenience Matchers'
                packaging 'jar'
                description 'Convenient Hamcrest Matcher derivations'
                url 'https://github.com/objecttrouve/convenience-matchers'

                scm {
                    url 'https://github.com/objecttrouve/convenience-matchers'
                    connection 'scm:https://github.com/objecttrouve/convenience-matchers.git'
                    developerConnection 'scm:git://github.com/objecttrouve/convenience-matchers.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'objecttrouve'
                        name "objecttrouve"
                        email 'un.object.trouve@gmail.com'
                    }
                }
            }
        }
    }
}

release {
    scmAdapters = [
            GitAdapter
    ]
    //noinspection GroovyVariableCanBeFinal
    versionPatterns = [
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
    ]

}

afterReleaseBuild.dependsOn uploadArchives

ext.moduleName = 'org.objecttrouve.testing.conveniencematchers'

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}

tasks.signArchives.onlyIf { project.hasProperty('doSignArchives') }

